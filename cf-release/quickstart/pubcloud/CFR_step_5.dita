<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cw2_thz_st">
<<<<<<< HEAD
<<<<<<< HEAD
 <title>Quick Start Step 5: <keyword keyref="quickStartHPcloudStep5"/></title>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
 <shortdesc>The following examples describe a typical process of pushing an application using the
    Cloud Foundry CLI to a Droplet Execution Agent (DEA) running on <keyword keyref="prodLong"
    />.</shortdesc>
=======
 <title>Quick Start Step 5: Explore a Sample Application</title>
=======
 <title>Quick Start Step 5: <keyword keyref="quickStartHPcloudStep5"/></title>
>>>>>>> 86ae294... Added new content
 <shortdesc></shortdesc>
>>>>>>> 9d80273... Testing theme changes on Linux
=======
 <shortdesc>The following examples describe a typical process of pushing an application to <keyword
      keyref="pubCloudShort"/> using <keyword keyref="prodShort"/>.</shortdesc>
>>>>>>> 6151c83... Added instructions for pushing an application
=======
 <shortdesc>The following examples describe a typical process of pushing an application to a Droplet
    Execution Agent (DEA) on <keyword keyref="pubCloudShort"/> using <keyword keyref="prodShort"
=======
 <shortdesc>The following examples describe a typical process of pushing an application using the
    Cloud Foundry CLI to a Droplet Execution Agent (DEA) running on <keyword keyref="prodLong"
>>>>>>> 416fc79... Final check for HCF 1.0 docs before sending for comments
    />.</shortdesc>
>>>>>>> 675cb02... Correcting the terminology for accuracy
 <prolog>
  <metadata>
   <othermeta name="author" content="Michael Khmelnitsky"/>
  </metadata>
 </prolog>
 <conbody>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> fccff96... Added external docs references
    <note type="tip">For more information, see the Cloud Foundry documentation on the <xref
        href="https://docs.cloudfoundry.org/concepts/architecture/execution-agent.html"
        format="html" scope="external">Droplet Execution Agent</xref>. For detailed instructions on
      using the <filepath>cf push</filepath> command and deploying applications, see the Cloud
      Foundry documentation on <xref
<<<<<<< HEAD
        href="http://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html" format="html"
        scope="external">deploying an application</xref>.</note>
  <simpletable>
   <strow>
    <stentry>1. <xref conref="CFR_step_2.dita#concept_ikh_xgz_st/quickStartHPcloudStep1_"/><p>2.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep2_"/></p><p>3.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep3_"/></p><p>4.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep4_"/></p><p>5.
                <b><keyword keyref="quickStartHPcloudStep5" id="quickStartHPcloudStep5"/></b></p>6.
            <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep6_"/></stentry>
    <stentry><b>Sample Applications</b><p>The following sample applications will get your started
            with the <codeph>cf push</codeph> workflow:<dl>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/go-env" format="html"
                    scope="external">go-env</xref> (Go)</dt>
                <dd>A simple Go application to display environment variables</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/node-env" format="html"
                    scope="external">node-env</xref> (Node.js)</dt>
                <dd>A simple demo that prints the server's environment variables</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/hpcloud/cf-demo-dashboard" format="html"
                    scope="external">cf-demo-dashboard</xref> (Ruby)</dt>
                <dd>Github stats widget for dashing</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/phpinfo" format="html"
                    scope="external">phpinfo</xref> (PHP)</dt>
                <dd>Outputs information about PHP's configuration</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/hpcloud/python-env" format="html"
                    scope="external">python-env</xref> (Python)</dt>
                <dd>A simple Python app to show environment variables</dd>
              </dlentry>
            </dl></p><b>To Prepare for Pushing Your First Application</b><ol id="ol_zdy_p53_tt">
            <li>Ensure that you are targeting the desired cluster, for
                example:<codeblock id="target_cluster">cf api http://api.203.0.113.0.xip.io</codeblock><note>To
                skip SSL validation, add the <filepath>--skip-ssl-validation</filepath> option to
                your command. If you cannot connect to your cluster, ensure that your connection has
                no proxy settings.</note></li>
            <li>Ensure that you are logged into the desired
                cluster:<codeblock>cf login</codeblock><p id="user_pass">When prompted, enter your
                username (email) and password.</p></li>
            <li>Create and target an
              organization:<codeblock>cf create-org <varname>&lt;organization></varname>
cf target -o <varname>&lt;organization></varname></codeblock></li>
            <li>Create a space, attach it to your organization, and target
                it:<codeblock>cf create-space <varname>&lt;space></varname> -o <varname>&lt;organization></varname>
cf target -o <varname>&lt;organization></varname> -s <varname>&lt;space></varname></codeblock><note
                type="tip">To save time, you can add all of the commands to a batch file or shell
                script, for
                example:<codeblock>cf api http://api.203.0.113.0.xip.io --skip-ssl-validation
cf login
cf create-org myOrg
cf target -o myOrg
cf create-space mySpace -o myOrg
cf target -o myOrg -s mySpace</codeblock></note></li>
          </ol><b>To Push a GitHub Application to Your Cluster</b><ol id="ol_idl_1mw_tt">
            <li>Navigate to the GitHub page of the application and click <uicontrol>Download
                ZIP</uicontrol>.</li>
            <li>Decompress the <filepath>zip</filepath> file into a convenient directory.</li>
            <li>Navigate to the directory that contains your application and its
                <filepath>yml</filepath> file, and ensure that the <filepath>yml</filepath> file is
              configured correctly.</li>
            <li>Target the cluster, for
              example:<codeblock conref="#concept_cw2_thz_st/target_cluster"/></li>
            <li>Ensure that you are logged into the cluster:<codeblock>cf login</codeblock><p
                conref="#concept_cw2_thz_st/user_pass"/></li>
            <li>Push the application:<codeblock>cf push</codeblock><p>Your application is deployed
                to the cluster. At the end of the process, Cloud Foundry displays the URL of the
                application, formatted using the xip.io wildcard DNS, for
                example:<codeblock><b>urls:</b> myAppName.203.0.113.0.xip.io</codeblock></p><note
                type="tip">You will need this URL to access the application using a web browser. You
                can also run the <filepath>cf apps</filepath> command to see detailed information
                about your application.</note><note>If you experience a problem, run the
                  <filepath>cf delete <varname>&lt;appName></varname></filepath> command, make the
                necessary adjustments, and then push the application again. For detailed
                instructions, see the Cloud Foundry documentation:<ul id="ul_yyr_c5w_tt">
                  <li><xref
                      href="https://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html"
                      format="html" scope="external">Deploying an Application</xref></li>
                  <li><xref href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html"
                      format="html" scope="external">Deploying with Application
                    Manifests</xref></li>
                  <li><xref
                      href="https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html"
                      format="html" scope="external">Troubleshooting Application Deployment and
                      Health</xref></li>
                </ul></note></li>
          </ol><xref href="CFR_step_6.dita#concept_m3k_bth_tt">
            <image href="../../media/NextButton.png" id="image_gqc_sgp_js" placement="break"/>
          </xref></stentry>
   </strow>
  </simpletable>
=======
  <p></p>
>>>>>>> 9d80273... Testing theme changes on Linux
=======
  <simpletable id="simpletable_zlb_lpz_st">
=======
=======
    <note type="tip">For detailed instructions on using the <filepath>cf push</filepath> command and
      deploying applications, see the <xref
        href="http://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html" format="html"
        scope="external">Cloud Foundry Documentation</xref>.</note>
>>>>>>> 076fff9... Modified instruction steps 5 & 6
=======
        href="http://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html" format="html"
        scope="external">deploying an application</xref>.</note>
>>>>>>> fccff96... Added external docs references
  <simpletable>
>>>>>>> be539c9... Added Step 6
   <strow>
    <stentry>1. <xref conref="CFR_step_2.dita#concept_ikh_xgz_st/quickStartHPcloudStep1_"/><p>2.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep2_"/></p><p>3.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep3_"/></p><p>4.
              <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep4_"/></p><p>5.
                <b><keyword keyref="quickStartHPcloudStep5" id="quickStartHPcloudStep5"/></b></p>6.
            <xref conref="CFR_step_1.dita#concept_s2k_b35_st/quickStartHPcloudStep6_"/></stentry>
    <stentry><b>Sample Applications</b><p>The following sample applications will get your started
            with the <codeph>cf push</codeph> workflow:<dl>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/go-env" format="html"
                    scope="external">go-env</xref> (Go)</dt>
                <dd>A simple Go application to display environment variables</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/node-env" format="html"
                    scope="external">node-env</xref> (Node.js)</dt>
                <dd>A simple demo that prints the server's environment variables</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/hpcloud/cf-demo-dashboard" format="html"
                    scope="external">cf-demo-dashboard</xref> (Ruby)</dt>
                <dd>Github stats widget for dashing</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/Stackato-Apps/phpinfo" format="html"
                    scope="external">phpinfo</xref> (PHP)</dt>
                <dd>Outputs information about PHP's configuration</dd>
              </dlentry>
              <dlentry>
                <dt><xref href="https://github.com/hpcloud/python-env" format="html"
                    scope="external">python-env</xref> (Python)</dt>
                <dd>A simple Python app to show environment variables</dd>
              </dlentry>
            </dl></p><b>Getting Ready to Push Your First Application</b><ol id="ol_zdy_p53_tt">
            <li>Ensure that you are targeting the desired cluster, for
                example:<codeblock id="target_cluster">cf api http://api.203.0.113.0.xip.io</codeblock><note>To
                skip SSL validation, add the <filepath>--skip-ssl-validation</filepath> option to
                your command. If you cannot connect to your cluster, ensure that your connection has
                no proxy settings.</note></li>
            <li>Ensure that you are logged into the desired
                cluster:<codeblock>cf login</codeblock><p id="user_pass">When prompted, enter your
                username (email) and password.</p></li>
            <li>Create and target an
              organization:<codeblock>cf create-org <varname>&lt;organization></varname>
cf target -o <varname>&lt;organization></varname></codeblock></li>
            <li>Create a space, attach it to your organization, and target
<<<<<<< HEAD
              it:<codeblock>cf create-space <varname>&lt;space></varname> -o <varname>&lt;organization></varname>
cf target -o <varname>&lt;organization></varname> -s <varname>&lt;space></varname></codeblock></li>
=======
                it:<codeblock>cf create-space <varname>&lt;space></varname> -o <varname>&lt;organization></varname>
cf target -o <varname>&lt;organization></varname> -s <varname>&lt;space></varname></codeblock><note
                type="tip">To save time, you can add all of the commands to a batch file or shell
                script, for
                example:<codeblock>cf api http://api.203.0.113.0.xip.io --skip-ssl-validation
cf login
cf create-org myOrg
cf target -o myOrg
cf create-space mySpace -o myOrg
cf target -o myOrg -s mySpace</codeblock></note></li>
>>>>>>> de2d2bc... Recreating branch without old cruft in it
          </ol><b>Pushing a GitHub Application to Your Cluster</b><ol id="ol_idl_1mw_tt">
            <li>Navigate to the GitHub page of the application and click <uicontrol>Download
                ZIP</uicontrol>.</li>
            <li>Decompress the <filepath>zip</filepath> file into a convenient directory.</li>
            <li>Navigate to the directory that contains your application and its
                <filepath>yml</filepath> file, and ensure that the <filepath>yml</filepath> file is
              configured correctly.</li>
            <li>Target the cluster, for
              example:<codeblock conref="#concept_cw2_thz_st/target_cluster"/></li>
            <li>Ensure that you are logged into the cluster:<codeblock>cf login</codeblock><p
                conref="#concept_cw2_thz_st/user_pass"/></li>
            <li>Push the application:<codeblock>cf push</codeblock><p>Your application is deployed
                to the cluster. At the end of the process, Cloud Foundry displays the URL of the
                application, formatted using the xip.io wildcard DNS, for
                example:<codeblock><b>urls:</b> myAppName.203.0.113.0.xip.io</codeblock></p><note
                type="tip">You will need this URL to access the application using a web browser. You
                can also run the <filepath>cf apps</filepath> command to see detailed information
                about your application.</note><note>If you experience a problem, run the
                  <filepath>cf delete <varname>&lt;appName></varname></filepath> command, make the
                necessary adjustments, and then push the application again. For detailed
                instructions, see the Cloud Foundry documentation:<ul id="ul_yyr_c5w_tt">
                  <li><xref
                      href="https://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html"
                      format="html" scope="external">Deploying an Application</xref></li>
                  <li><xref href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html"
                      format="html" scope="external">Deploying with Application
                    Manifests</xref></li>
                  <li><xref
                      href="https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html"
                      format="html" scope="external">Troubleshooting Application Deployment and
                      Health</xref></li>
                </ul></note></li>
          </ol><xref href="CFR_step_6.dita#concept_m3k_bth_tt">
            <image href="../../media/NextButton.png" id="image_gqc_sgp_js" placement="break"/>
          </xref></stentry>
   </strow>
  </simpletable>
>>>>>>> e6e046d... Inserting the "Wizard" structure a la HDP docs
 </conbody>
</concept>
